<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Zhang Jian&#39;s Homepage</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Zhang Jian&#39;s Homepage</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Sat, 21 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bond Valuation</title>
      <link>/post/2020/03/21/bond-valuation/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/21/bond-valuation/</guid>
      <description>债券估值基础 假设债券的现金流如下：投资面值为100元，票面利率为5％，到期日为5年的债券。  息票利率是您从持有债券中获得的利息，因此，在债券到期之前，每年将获得5美元的息票付款。到期时，您还将获得100的面值返还。 计算每个现金流量的现值
计算债券的价值
假设我们给定该债券的到期收益率为6%
# 先调入包 library(tidyverse) library(ggthemes) # ggplot2的主题包 library(ggfortify) cf &amp;lt;- c(5,5,5,5,105) cf_df &amp;lt;- as_tibble(cf) ## Warning: Calling `as_tibble()` on a vector is discouraged, because the behavior is likely to change in the future. Use `tibble::enframe(name = NULL)` instead. ## This warning is displayed once per session. # 生成一个时间序列 cf_df &amp;lt;- cf_df %&amp;gt;% mutate(year = as.numeric(rownames(cf_df))) %&amp;gt;% rename(cf = value) cf_df ## # A tibble: 5 x 2 ## cf year ## &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; ## 1 5 1 ## 2 5 2 ## 3 5 3 ## 4 5 4 ## 5 105 5 # 继续生成一个每一期的现金流的现值 cf_df &amp;lt;- cf_df %&amp;gt;% mutate(pv = cf/(1+0.</description>
    </item>
    
    <item>
      <title>利率作业</title>
      <link>/post/2020/03/21/%E5%88%A9%E7%8E%87%E4%BD%9C%E4%B8%9A/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/21/%E5%88%A9%E7%8E%87%E4%BD%9C%E4%B8%9A/</guid>
      <description>介绍如果安装和调用包  介绍如何计算NPV和IRR  简单展示画图——非完美版 1. R或python之所以强大是应为包多，包多干的事就多。安装和调用包非常简单，在Rstudio里直接使用右边的Packages对包进行管理，用鼠标就能完成。  使用代码安装install.packages(‘包的名字’)，不过我还是建议在Rstudio里直接点击安装。  我们先安装一个现代R里最重要的一个套包，安装前请同学们调整好自己tools菜单，option选项里安装镜像站点的位置。  调用包也非常简单，直接使用library()加包的名字，每次运行脚本时都需要把重要的包调用，首当其冲的肯定是tidyverse包 #install.packages(&amp;quot;tidyverse&amp;quot;) library(tidyverse) ## -- Attaching packages ---------------------------------------------------- tidyverse 1.3.0 -- ## √ ggplot2 3.3.0 √ purrr 0.3.3 ## √ tibble 2.1.3 √ dplyr 0.8.5 ## √ tidyr 1.0.2 √ stringr 1.4.0 ## √ readr 1.3.1 √ forcats 0.5.0 ## -- Conflicts ------------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag()   接下来我们可以安装一个和我们接下来课程相关的金融包,代码前我加了一个“#”代表这条被注释了，大家可以用快捷键ctrl+shift+c进行注释或取消注释 #install.</description>
    </item>
    
    <item>
      <title>投资学作业答案</title>
      <link>/post/2020/03/21/%E6%8A%95%E8%B5%84%E5%AD%A6%E4%BD%9C%E4%B8%9A%E7%AD%94%E6%A1%88/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/21/%E6%8A%95%E8%B5%84%E5%AD%A6%E4%BD%9C%E4%B8%9A%E7%AD%94%E6%A1%88/</guid>
      <description>小张打算给自己刚出生的孩子购买保险产品，该产品规定从0岁起投保人每年年初支付保险费6000元，共10次。  从支付保险费的次年起，保险公司每2年年末返还一次收益，每次3000元。在孩子60岁时再一次性支付200000元养老费。请计算这笔保险的IRR，并给出自己的判断和理解 #调用两个包 library(tidyverse) library(jrvFinance) library(DT) # 建立一个dataframe，利用tidyverse进行数据清理 cf &amp;lt;- tibble(period= 0:60,exp = 0) cf &amp;lt;- cf %&amp;gt;% mutate(exp = if_else(period %in% seq(0,9),-6000,0)) %&amp;gt;% mutate(income = if_else(period %in% seq(3,60,by = 2),3000,0)) cf[61,&amp;quot;income&amp;quot;] &amp;lt;- 200000 #35行，我是这么去给最后一期赋值的，如果同学们有更好的方法可以交流修改 #展示一下现金流 cf %&amp;gt;% mutate(pmt = exp+income) %&amp;gt;% datatable(rownames = F, caption = &amp;quot;该保险的现金流&amp;quot;,colnames = c(&amp;#39;年份&amp;#39;,&amp;#39;支出&amp;#39;,&amp;#39;收益&amp;#39;,&amp;#39;净收益&amp;#39;))  {&#34;x&#34;:{&#34;filter&#34;:&#34;none&#34;,&#34;caption&#34;:&#34;该保险的现金流&#34;,&#34;data&#34;:[[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],[-6000,-6000,-6000,-6000,-6000,-6000,-6000,-6000,-6000,-6000,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,200000],[-6000,-6000,-6000,-3000,-6000,-3000,-6000,-3000,-6000,-3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,0,3000,200000]],&#34;container&#34;:&#34;\n \n \n 年份\n 支出\n 收益\n 净收益\n \n \n&#34;,&#34;options&#34;:{&#34;columnDefs&#34;:[{&#34;className&#34;:&#34;dt-right&#34;,&#34;targets&#34;:[0,1,2,3]}],&#34;order&#34;:[],&#34;autoWidth&#34;:false,&#34;orderClasses&#34;:false}},&#34;evals&#34;:[],&#34;jsHooks&#34;:[]} #计算净收益的irr irr &amp;lt;- cf %&amp;gt;% mutate(pmt = exp+income) %&amp;gt;% select(pmt) %&amp;gt;% pull() %&amp;gt;% irr() #利用jrv包进行计算，注意40行用了一个pull函数 paste(&amp;quot;我们要计算的IRR是：&amp;quot;,irr) ## [1] &amp;quot;我们要计算的IRR是： 0.</description>
    </item>
    
    <item>
      <title>时间序列分析1</title>
      <link>/post/2020/03/21/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%901/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/2020/03/21/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%88%86%E6%9E%901/</guid>
      <description>时间序列最简单的预测方法 均值法 \[\hat{y}_{T+h | T}=\left(y_{1}+\cdots+y_{T}\right) / T\]
  一个例子 library(tidyverse) ## -- Attaching packages ---------------------------------------------------- tidyverse 1.3.0 -- ## √ ggplot2 3.3.0 √ purrr 0.3.3 ## √ tibble 2.1.3 √ dplyr 0.8.5 ## √ tidyr 1.0.2 √ stringr 1.4.0 ## √ readr 1.3.1 √ forcats 0.5.0 ## -- Conflicts ------------------------------------------------------- tidyverse_conflicts() -- ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() library(forecast) ## Registered S3 method overwritten by &amp;#39;quantmod&amp;#39;: ## method from ## as.</description>
    </item>
    
  </channel>
</rss>